import os
import sys
import json

import shutil
import logging
import dotenv

from contextlib import suppress

from bot.loguru_handler import InterceptHandler
from bot.queue import Queue
from bot.database import SQLighter
from bot.other import *
from bot.constants import AudioLibrariesEnum, AudfprintModeEnum
from bot.backup import backup_sender

from aiogram.utils.callback_data import CallbackData
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.files import JSONStorage

os.makedirs("bot/user_data", exist_ok=True)

dotenv.load_dotenv()

TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
AUDIO_LIBRARY = os.getenv("AUDIO_LIBRARY")
AUDFPRINT_MODE = os.getenv("AUDFPRINT_MODE")

def validate_env_vars():
    if TELEGRAM_API_TOKEN is None:
        raise ValueError("Please set TELEGRAM_API_TOKEN in .env file")
    if AUDIO_LIBRARY is None or AUDIO_LIBRARY not in [AudioLibrariesEnum.audfprint.value, AudioLibrariesEnum.SoundFingerprinting.value]:
        raise ValueError("Please set AUDIO_LIBRARY in .env file")
    if AUDIO_LIBRARY == AudioLibrariesEnum.audfprint.value and (AUDFPRINT_MODE is None or AUDFPRINT_MODE not in [AudfprintModeEnum.accurate.value, AudfprintModeEnum.fast.value]):
        raise ValueError("Please set AUDFPRINT_MODE in .env file")

validate_env_vars()

memory_storage = JSONStorage("bot/user_data/fsm_state_storage.json")

logging.basicConfig(handlers=[InterceptHandler()], level=0, force=True)

bot = Bot(token=TELEGRAM_API_TOKEN)
dp = Dispatcher(bot, storage=memory_storage)

db = SQLighter("bot/user_data/database.db")

queue = Queue(maxsize=6)

manage_folder_cb = CallbackData("manage_folder_menu", "folder_id")
remove_folder_cb = CallbackData("remove_folder_message", "folder_id")
remove_folder_process_cb = CallbackData("remove_folder_process", "folder_id")
upload_audio_sample_cb = CallbackData("upload_audio_sample_message", "folder_id")
remove_audio_sample_cb = CallbackData("remove_audio_sample_message", "folder_id")
recognize_query_cb = CallbackData("recognize_query_message", "folder_id")


class CreateFolder(StatesGroup):
    step_1 = State()
    step_2 = State()

class Upload_Sample(StatesGroup):
    step_1 = State()
    step_2 = State()

class RemoveSample(StatesGroup):
    step_1 = State()

class UploadQuery(StatesGroup):
    step_1 = State()

class TaskException(Exception):
    def __init__(self, text: str, ex: Exception):
        self.text = text
        self.ex = ex


async def download_file(message, file_id, destination) -> types.Message:
    message_text = message.text + "\n\n–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞..."
    await message.edit_text(message_text + " –í—ã–ø–æ–ª–Ω—è–µ–º...")
    try:
        await bot.download_file_by_id(file_id, destination)
        assert os.path.exists(destination)
    except Exception as ex:
        managment_msg = await message.edit_text(message_text + " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞...")
        raise TaskException(managment_msg.text, ex)
    else:
        managment_msg = await message.edit_text(message_text + " –ì–æ—Ç–æ–≤–æ ‚úÖ")
        return managment_msg

async def audio_processing(message, input_file, output_file) -> types.Message:
    message_text = message.text + "\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞..."
    await message.edit_text(message_text + " –í—ã–ø–æ–ª–Ω—è–µ–º...")
    try:
        cmd = ['ffmpeg-normalize', '-q', '-vn', input_file, '-c:a', 'libmp3lame', '-o', output_file]
        await execute_command(cmd)
        assert os.path.exists(output_file)
    except Exception as ex:
        managment_msg = await message.edit_text(message_text + " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞... üìõ")
        raise TaskException(managment_msg.text, ex)
    else:
        managment_msg = await message.edit_text(message_text + " –ì–æ—Ç–æ–≤–æ ‚úÖ")
        return managment_msg

async def register_audio_hashes(message, input_file, fingerprint_db) -> types.Message:
    message_text = message.text + "\n\n–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤ –±–∞–∑—É..."
    await message.edit_text(message_text + " –í—ã–ø–æ–ª–Ω—è–µ–º...")
    try:

        if os.path.exists(fingerprint_db) is False:
            db_hashes_add_method = 'new'
        elif os.path.exists(fingerprint_db) is True:
            db_hashes_add_method = 'add'

        if AUDIO_LIBRARY == AudioLibrariesEnum.audfprint.value:
            if AUDFPRINT_MODE == AudfprintModeEnum.accurate.value:
                cmd = [sys.executable, 'bot/library/audfprint-master/audfprint.py', db_hashes_add_method, '-d', fingerprint_db, input_file, '-n', '120', '-X', '-F', '0']
            elif AUDFPRINT_MODE == AudfprintModeEnum.fast.value:
                cmd = [sys.executable, 'bot/library/audfprint-master/audfprint.py', db_hashes_add_method, '-d', fingerprint_db, input_file]
        elif AUDIO_LIBRARY == AudioLibrariesEnum.SoundFingerprinting.value:
            cmd = ['bot/library/SoundFingerprinting/SoundFingerprinting.AddictedCS.Demo', "add", fingerprint_db, input_file]

        await execute_command(cmd)

        assert os.path.exists(fingerprint_db)
    except Exception as ex:
        managment_msg = await message.edit_text(message_text + " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞...")
        raise TaskException(managment_msg.text, ex)
    else:
        managment_msg = await message.edit_text(message_text + " –ì–æ—Ç–æ–≤–æ ‚úÖ")
        return managment_msg

async def match_audio_query(message, input_file, fingerprint_db) -> types.Message:
    message_text = message.text + "\n\n–ò—â–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤ –±–∞–∑–µ..."
    await message.edit_text(message_text + " –í—ã–ø–æ–ª–Ω—è–µ–º...")
    try:
        if AUDIO_LIBRARY == AudioLibrariesEnum.audfprint.value:
            if AUDFPRINT_MODE == AudfprintModeEnum.accurate.value:
                cmd = [sys.executable, 'bot/library/audfprint/audfprint.py', 'match', '-d', fingerprint_db, input_file, '-n', '120', '-D', '2000', '-X', '-F', '18']
            elif AUDFPRINT_MODE == AudfprintModeEnum.fast.value:
                cmd = [sys.executable, 'bot/library/audfprint/audfprint.py', 'match', '-d', fingerprint_db, input_file]
        elif AUDIO_LIBRARY == AudioLibrariesEnum.SoundFingerprinting.value:
            cmd = ['bot/library/SoundFingerprinting/SoundFingerprinting.AddictedCS.Demo', 'match', fingerprint_db, input_file]

        process = await execute_command(cmd)
        command_result = None

        async with process_output_lines(process) as lines:
            async for line in lines:
                try:
                    command_result = json.loads(line)["RESULT"]
                except Exception as ex:
                    pass
        
        if command_result == "NOMATCH":
            result = "–≠—Ç–æ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ, –∏–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –µ—ë. üòá"
        else:
            result = command_result

        assert os.path.exists(fingerprint_db)
    except Exception as ex:
        managment_msg = await message.edit_text(message_text + " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞...")
        raise TaskException(managment_msg.text, ex)
    else:
        managment_msg = await message.edit_text(message_text + f" –ì–æ—Ç–æ–≤–æ ‚úÖ\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}\n")
        return managment_msg

async def delete_audio_hashes(message, fingerprint_db, sample_name, state: FSMContext) -> types.Message:
    user_data = await state.get_data()
    message_text = message.text + "\n\n–£–¥–∞–ª—è–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ –±–∞–∑—ã..."
    await message.edit_text(message_text + " –í—ã–ø–æ–ª–Ω—è–µ–º...")
    try:
        folder_samples = db.select_folder_samples(user_data["folder_id"])

        if len(folder_samples) == 1:
            os.remove(fingerprint_db)
            return

        if AUDIO_LIBRARY == AudioLibrariesEnum.audfprint.value:
            cmd = [sys.executable, 'bot/library/audfprint-master/audfprint.py', 'remove', '-d', fingerprint_db, sample_name, '-H', '2']
        elif AUDIO_LIBRARY == AudioLibrariesEnum.SoundFingerprinting.value:
            cmd = ['bot/library/SoundFingerprinting/SoundFingerprinting.AddictedCS.Demo', 'remove', fingerprint_db, sample_name]
        
        await execute_command(cmd)
        
        assert os.path.exists(fingerprint_db)
    except Exception as ex:
       managment_msg = await message.edit_text(message_text + " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞...")
       raise TaskException(managment_msg.text, ex)
    else:
        managment_msg = await message.edit_text(message_text + " –ì–æ—Ç–æ–≤–æ ‚úÖ")
        return managment_msg


@dp.message_handler(lambda message: db.select_user(message.chat.id) is None)
async def new_user_message(message: types.Message):
    db.create_user(message.chat.id, message.from_user.first_name)
    await process_help_command_1(message)


@dp.message_handler(commands=['start'], state='*')
async def main_menu_message(message: types.Message, messaging_type='reply'):
    keyboard_markup = types.InlineKeyboardMarkup()
    folder_list_btns = types.InlineKeyboardButton('–ü–∞–ø–∫–∏ üìÇ', callback_data='folders_list')
    about_btns = types.InlineKeyboardButton('–û –±–æ—Ç–µ / –ø–æ–º–æ—â—å ü§ñ', callback_data='about_bot_message')
    keyboard_markup.row(folder_list_btns)
    keyboard_markup.row(about_btns)
    if messaging_type == 'edit':
        await message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é : ", reply_markup=keyboard_markup)
    elif messaging_type == 'reply':
        await message.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é : ", reply_markup=keyboard_markup)


@dp.callback_query_handler(text='about_bot_message')
async def about_bot_message(call: types.CallbackQuery):
    await process_help_command_1(call.message, "edit")
    await call.answer()

async def folder_list_menu_message(message: types.Message, messaging_type="edit"):
    user_folders = db.select_user_folders(message.chat.id)

    keyboard_markup = types.InlineKeyboardMarkup()
    create_new_folder_btn = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É üóÇ', callback_data='create_new_folder')
    keyboard_markup.row(create_new_folder_btn)

    for folder in user_folders:
        samples_count = len(db.select_folder_samples(folder[0]))
        folder_btn = types.InlineKeyboardButton(f"{folder[1]} ({samples_count})", callback_data=manage_folder_cb.new(folder[0]))
        keyboard_markup.row(folder_btn)

    back_btn = types.InlineKeyboardButton('¬´      ', callback_data='welcome_message')
    keyboard_markup.row(back_btn)

    if messaging_type == 'start':
        await message.answer(f"–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–ø–æ–∫ :\n\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫: {len(user_folders)}", reply_markup=keyboard_markup)
    elif messaging_type == 'edit':
        await message.edit_text(f"–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–ø–æ–∫ :\n\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫: {len(user_folders)}", reply_markup=keyboard_markup)


@dp.callback_query_handler(text="create_new_folder")
async def create_folder_step_1_message(call: types.CallbackQuery):
    if len(db.select_user_folders(call.message.chat.id)) >= 10:
        await call.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ - 10. –£–¥–∞–ª–∏—Ç–µ –Ω–µ –Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.', True)
        return

    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data='folders_list')
    keyboard_markup.row(back_btn)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –ø–∞–ø–∫–∏ : ", reply_markup=keyboard_markup)
    await CreateFolder.step_1.set()
    await call.answer()

@dp.message_handler(state=CreateFolder.step_1, content_types=types.ContentTypes.TEXT)
async def create_folder_step_2_message(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['folder_name'] = message.text.replace('\n', ' ')

    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data='folders_list')
    keyboard_markup.row(back_btn)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏
    if len(user_data['folder_name']) >= 20:
        await message.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=keyboard_markup)
        return

    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –ë–î
    if user_data['folder_name'].lower() in [x[1].lower() for x in db.select_user_folders(message.chat.id)]:
        await message.reply('–ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è', reply_markup=keyboard_markup)
        return

    await state.finish()

    path_list = path(message.chat.id, user_data['folder_name'])
    os.makedirs(path_list.tmp_audio_samples())
    os.makedirs(path_list.processed_audio_samples())
    os.makedirs(path_list.tmp_query_audio())
    os.makedirs(path_list.processed_query_audio())
    os.makedirs(path_list.fingerprint_db_dir_path(), exist_ok=True)

    db.create_folder(message.chat.id, user_data['folder_name'])

    await message.reply(f'‚úÖ –ü–∞–ø–∫–∞ "{user_data["folder_name"]}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
    await folder_list_menu_message(message, 'start')


@dp.callback_query_handler(remove_folder_cb.filter(), state='*')
async def delete_folder_step_1_message(call: types.CallbackQuery, callback_data: dict):
    folder_id = int(callback_data['folder_id'])
    folder_info = db.select_folder(folder_id)

    keyboard_markup = types.InlineKeyboardMarkup()
    delete_btn = types.InlineKeyboardButton('–î–∞!', callback_data=remove_folder_process_cb.new(folder_id))
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(folder_id))
    keyboard_markup.row(delete_btn)
    keyboard_markup.row(back_btn)
    await call.message.edit_text(
        f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É "{folder_info[1]}" —Å–æ –≤—Å–µ–º–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–º–∏ –≤–Ω—É—Ç—Ä–∏?\n\n'
        "<b>–í–ù–ò–ú–ê–ù–ò–ï! –≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–õ–¨–ó–Ø –û–¢–ú–ï–ù–ò–¢–¨</b>",
        parse_mode="HTML",
        reply_markup=keyboard_markup
    )
    await call.answer()

@dp.callback_query_handler(remove_folder_process_cb.filter(), state='*')
async def delete_folder_step_2_message(call: types.CallbackQuery, callback_data: dict):
    folder_id = int(callback_data['folder_id'])
    folder_info = db.select_folder(folder_id)
    folder_samples = db.select_folder_samples(folder_id)

    path_list = path(call.message.chat.id, folder_info[1])
    # Delete all folders
    shutil.rmtree(path_list.tmp_audio_samples())
    shutil.rmtree(path_list.processed_audio_samples())
    shutil.rmtree(path_list.tmp_query_audio())
    shutil.rmtree(path_list.processed_query_audio())

    # Delete audiofingerprint database
    if os.path.exists(path_list.fingerprint_db()):
        os.remove(path_list.fingerprint_db())

    for sample in folder_samples:
        db.unregister_audio_sample(folder_id, sample[1])

    db.delete_folder(folder_id)

    await call.answer(f'‚úÖ –ü–∞–ø–∫–∞ "{folder_info[1]}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
    await folder_list_menu_message(call.message, 'edit')


@dp.callback_query_handler(manage_folder_cb.filter(), state='*')
async def manage_folder_menu_message(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()

    folder_id = int(callback_data['folder_id'])
    folder_info = db.select_folder(folder_id)
    folder_samples = db.select_folder_samples(folder_id)

    keyboard_markup = types.InlineKeyboardMarkup()
    upload_audio_samples_btn = types.InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã üì§', callback_data=upload_audio_sample_cb.new(folder_id))
    keyboard_markup.row(upload_audio_samples_btn)
    remove_audio_samples_btn = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üóë', callback_data=remove_audio_sample_cb.new(folder_id))
    keyboard_markup.row(remove_audio_samples_btn)
    quiz_mode_btn = types.InlineKeyboardButton('–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üîé', callback_data=recognize_query_cb.new(folder_id))
    keyboard_markup.row(quiz_mode_btn)
    delete_btn = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫y ‚ùå', callback_data=remove_folder_cb.new(folder_id))
    keyboard_markup.row(delete_btn)
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data='folders_list')
    keyboard_markup.row(back_btn)

    samples_name = ""
    for num, sample in enumerate(folder_samples, 1):
        samples_name += str(f"{num}) {sample[1]}\n")

    await call.message.edit_text(
        f"–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –ø–∞–ø–∫–æ–π : {folder_info[1]}\n\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω: {len(folder_samples)}\n"
        f"–°–ø–∏—Å–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω :\n{samples_name}\n"
        "–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è - ", reply_markup=keyboard_markup
    )
    await call.answer()


@dp.callback_query_handler(upload_audio_sample_cb.filter(), state='*')
async def upload_audio_sample_message(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    folder_id = int(callback_data['folder_id'])
    folder_info = db.select_folder(folder_id)
    folder_samples = db.select_folder_samples(folder_id)

    if len(folder_samples) > 90:
        await call.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω –≤ –ø–∞–ø–∫–µ - 90', True)
        return

    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(folder_id))
    keyboard_markup.row(back_btn)
    await call.message.edit_text(
                    f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –ø–∞–ø–∫–æ–π "{folder_info[1]}", –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω\n\n'
                    '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã - mp3, wav, wma, ogg, flac, aac, opus;\n\n'
                    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 20 –º–±, —ç—Ç–æ –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¢–µ–ª–µ–≥—Ä–∞–º–æ–º –¥–ª—è –±–æ—Ç–æ–≤;',
                    parse_mode="HTML",
                    reply_markup=keyboard_markup)
    await Upload_Sample.step_1.set()
    await state.update_data({"folder_id": folder_id})
    await call.answer()

@dp.message_handler(state=Upload_Sample.step_1, content_types=types.ContentTypes.DOCUMENT | types.ContentTypes.AUDIO | types.ContentTypes.VIDEO)
async def upload_audio_sample_step_1_message(message: types.Message, state: FSMContext):
    if message.content_type == "document":
        audio_sample_file_info = message.document
        name_file = message.document.file_name
    elif message.content_type == "audio":
        audio_sample_file_info = message.audio
        name_file = message.audio.file_name

    async with state.proxy() as user_data:
        user_data['audio_sample_file_name'] = os.path.splitext(name_file)[0]
        user_data['audio_sample_file_extensions'] = os.path.splitext(name_file)[1]
        user_data['audio_sample_file_id'] = audio_sample_file_info.file_id
        user_data['audio_sample_file_unique_id'] = audio_sample_file_info.file_unique_id

    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(user_data["folder_id"]))
    keyboard_markup.row(back_btn)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if int(audio_sample_file_info.file_size) >= 20871520:
        await message.reply('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 mb. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª', reply_markup=keyboard_markup)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ db
    file_unique_id = audio_sample_file_info.file_unique_id
    for sample in db.select_folder_samples(user_data["folder_id"]):
        if sample[3] == file_unique_id:
            await message.reply(f'–≠—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{sample[1]}"\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª', reply_markup=keyboard_markup)
            return

    await state.update_data({'audio_sample_name': user_data["audio_sample_file_name"]})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if user_data["audio_sample_file_extensions"].lower() in ('.aac', '.wav', '.mp3', '.wma', '.ogg', '.flac', '.opus'):
        # await Upload_Sample.step_2.set()

        # await message.reply(
        #                 f'–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ : <code>{user_data["audio_sample_file_name"]}</code>\n\n'
        #                 '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å—ç–º–ø–ª–∞. –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã',
        #                 parse_mode="HTML",
        #                 reply_markup=keyboard_markup)
        await upload_audio_sample_step_2_message(message, state)
    elif not user_data["audio_sample_file_extensions"]:
        await message.reply('–ú—ã –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏. –í–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ.\n–ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑', reply_markup=keyboard_markup)
        return
    else:
        await message.reply(f'–£–≤—ã, –Ω–æ –º—ã —Ñ–æ—Ä–º–∞—Ç "{user_data["audio_sample_file_extensions"]}" –Ω–µ –ø—Ä–∏–Ω–µ–º–∞–µ–º, –ø—Ä–∏—à–ª–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n\n', reply_markup=keyboard_markup)
        return


@dp.message_handler(state=Upload_Sample.step_2, content_types=types.ContentTypes.TEXT)
async def upload_audio_sample_step_2_message(message: types.Message, state: FSMContext):
    # async with state.proxy() as user_data:
    #     user_data['audio_sample_name'] = message.text.replace('\n', ' ')

    user_data = await state.get_data()
    folder_info = db.select_folder(user_data["folder_id"])

    file_id = user_data["audio_sample_file_id"]
    audio_sample_name = user_data["audio_sample_name"]
    audio_sample_full_name = f'{audio_sample_name}{user_data["audio_sample_file_extensions"]}'
    path_list = path(message.chat.id, folder_info[1])

    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(user_data["folder_id"]))
    keyboard_markup.row(back_btn)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—ç–º–ø–ª–∞
    if len(audio_sample_name) >= 180:
        await message.reply('–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 180 —Å–∏–º–≤–æ–ª–æ–≤, –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞', reply_markup=keyboard_markup)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—É–¥–∏–æ —Å—ç–º–ø–ª —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    if user_data["audio_sample_name"].lower() in [x[1].lower() for x in db.select_folder_samples(user_data["folder_id"])]:
        await message.reply("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=keyboard_markup)
        return

    # await state.finish()

    managment_msg = await message.reply('–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å, –æ–∂–∏–¥–∞–π—Ç–µ...')

    await queue.put_item(message.chat.id)

    try:
        # Stage 0 : download file
        managment_msg = await download_file(managment_msg, file_id, path_list.tmp_audio_samples(audio_sample_full_name))
        # Stage 1 : check audio files for integrity and mormalize, convert them
        managment_msg = await audio_processing(managment_msg, path_list.tmp_audio_samples(audio_sample_full_name), path_list.processed_audio_samples(audio_sample_name + ".mp3"))
        # Stage 2 : analyze current audio sample hashes
        managment_msg = await register_audio_hashes(managment_msg, path_list.processed_audio_samples(audio_sample_name + ".mp3"), path_list.fingerprint_db())
        # Stage 3 : register current audio sample hashes
        db.register_audio_sample(user_data["folder_id"], user_data["audio_sample_name"], user_data["audio_sample_file_unique_id"])
    except TaskException as task_exception:
        logging.exception(task_exception.ex)
        message_text = task_exception.text + "\n\n–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π"
    else:
        message_text = managment_msg.text + "\n\n–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    finally:
        keyboard_markup = types.InlineKeyboardMarkup()
        manage_folder_menu_message_btn = types.InlineKeyboardButton('¬´ –í–µ—Ä–Ω—É—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ', callback_data=manage_folder_cb.new(user_data["folder_id"]))
        upload_sample_btn = types.InlineKeyboardButton('¬ª –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É', callback_data=upload_audio_sample_cb.new(user_data["folder_id"]))
        keyboard_markup.row(manage_folder_menu_message_btn)
        keyboard_markup.row(upload_sample_btn)
        await managment_msg.edit_text(message_text, reply_markup=keyboard_markup)

        with suppress(FileNotFoundError):
            os.remove(path_list.tmp_audio_samples(audio_sample_full_name))
            os.remove(path_list.processed_audio_samples(audio_sample_name + ".mp3"))

        await queue.get_item(message.chat.id)
        queue.task_done()


@dp.callback_query_handler(remove_audio_sample_cb.filter(), state='*')
async def remove_audio_sample_message(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    folder_id = int(callback_data['folder_id'])
    folder_info = db.select_folder(folder_id)
    folder_samples = db.select_folder_samples(folder_id)

    if len(folder_samples) == 0:
        await call.answer(f'–í –ø–∞–ø–∫–µ "{folder_info[1]}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.', True)
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("<<< –û—Ç–º–µ–Ω–∞ >>>")

    for sample in folder_samples:
        keyboard.add(sample[1])

    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)
    await RemoveSample.step_1.set()
    await state.update_data({"folder_id": folder_id})
    await call.answer()

@dp.message_handler(state=RemoveSample.step_1, content_types=types.ContentTypes.TEXT)
async def remove_audio_sample_step_1_message(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['chosen_sample'] = message.text

    await state.finish()

    folder_info = db.select_folder(user_data["folder_id"])

    path_list = path(message.chat.id, folder_info[1])

    if user_data['chosen_sample'] == "<<< –û—Ç–º–µ–Ω–∞ >>>":
        await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é', reply_markup=keyboard_markup)
        return

    managment_msg = await message.reply('–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å, –æ–∂–∏–¥–∞–π—Ç–µ...')

    await queue.put_item(message.chat.id)

    try:
        managment_msg = await delete_audio_hashes(managment_msg, path_list.fingerprint_db(), path_list.processed_audio_samples(user_data['chosen_sample'] + ".mp3"))
        db.unregister_audio_sample(user_data["folder_id"], user_data['chosen_sample'])
    except TaskException as task_exception:
        logging.exception(task_exception.ex)
        message_text = task_exception.text + "\n\n–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π"
    else:
        message_text = managment_msg.text + "\n\n–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    finally:
        keyboard_markup = types.InlineKeyboardMarkup()
        manage_folder_menu_message_btn = types.InlineKeyboardButton('¬´ –í–µ—Ä–Ω—É—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ', callback_data=manage_folder_cb.new(user_data["folder_id"]))
        upload_sample_btn = types.InlineKeyboardButton('¬ª –£–¥–∞–ª–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É', callback_data=remove_audio_sample_cb.new(user_data["folder_id"]))
        keyboard_markup.row(manage_folder_menu_message_btn)
        keyboard_markup.row(upload_sample_btn)
        await managment_msg.edit_text(message_text, reply_markup=keyboard_markup)

        await queue.get_item(message.chat.id)
        queue.task_done()

@dp.callback_query_handler(recognize_query_cb.filter(), state='*')
async def recognize_query_message(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    folder_id = int(callback_data['folder_id'])
    folder_info = db.select_folder(folder_id)
    folder_samples = db.select_folder_samples(folder_id)

    if len(folder_samples) == 0:
        await call.answer(f'–í –ø–∞–ø–∫–µ "{folder_info[1]}" –Ω–µ—Ç—É –Ω–∏ –æ–¥–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã', True)
        return

    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(folder_id))
    keyboard_markup.row(back_btn)
    await call.message.edit_text(
                    f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –ø–∞–ø–∫–æ–π "{folder_info[1]}", –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã\n\n'
                    "<i>–ñ–¥—É –æ—Ç —Ç–µ–±—è –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–µ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥</i>",
                    parse_mode="HTML",
                    reply_markup=keyboard_markup)
    await UploadQuery.step_1.set()
    await state.update_data({"folder_id": folder_id})
    await call.answer()

@dp.message_handler(state=UploadQuery.step_1, content_types=types.ContentTypes.VOICE | types.ContentTypes.AUDIO)
async def recognize_query_step_1_message(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    folder_info = db.select_folder(user_data["folder_id"])

    random_str = generate_random_string(32)
    path_list = path(message.chat.id, folder_info[1])

    if message.content_type == "voice":
        file_id = message.voice.file_id
        if message.voice.mime_type == "audio/ogg":
            query_audio_file_extensions = ".ogg"
        else:
            query_audio_file_extensions = ".NULL"
            # await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...", True)
    elif message.content_type == "audio":
        file_id = message.audio.file_id
        name_file = message.audio.file_name  # New in Bot API 5.0
        query_audio_file_extensions = os.path.splitext(name_file)[1]

    if query_audio_file_extensions.lower() not in ('.aac', '.wav', '.mp3', '.wma', '.ogg', '.flac', '.opus'):
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(user_data["folder_id"]))
        keyboard_markup.row(back_btn)
        await message.reply('–ú—ã –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑', reply_markup=keyboard_markup)
        return

    query_audio_full_name = f"{random_str}{query_audio_file_extensions}"
    query_audio_name = f"{random_str}"

    await state.finish()
    managment_msg = await message.reply('–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å, –æ–∂–∏–¥–∞–π—Ç–µ...')

    await queue.put_item(message.chat.id)

    try:
        # Stage 0 : download file
        managment_msg = await download_file(managment_msg, file_id, path_list.tmp_query_audio(query_audio_full_name))
        # Stage 1 : check audio files for integrity and mormalize, convert them
        managment_msg = await audio_processing(managment_msg, path_list.tmp_query_audio(query_audio_full_name), path_list.processed_query_audio(query_audio_name + ".mp3"))
        # Stage 2 : match audio query
        managment_msg = await match_audio_query(managment_msg, path_list.processed_query_audio(query_audio_name + ".mp3"), path_list.fingerprint_db())
    except TaskException as task_exception:
        logging.exception(task_exception.ex)
        message_text = task_exception.text + "\n\n–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π"
    else:
        message_text = managment_msg.text + "\n\n–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    finally:
        keyboard_markup = types.InlineKeyboardMarkup()
        manage_folder_menu_message_btn = types.InlineKeyboardButton('¬´ –í–µ—Ä–Ω—É—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ', callback_data=manage_folder_cb.new(user_data["folder_id"]))
        upload_sample_btn = types.InlineKeyboardButton('¬ª –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É', callback_data=recognize_query_cb.new(user_data["folder_id"]))
        keyboard_markup.row(manage_folder_menu_message_btn)
        keyboard_markup.row(upload_sample_btn)
        await managment_msg.edit_text(message_text, reply_markup=keyboard_markup)
        
        with suppress(FileNotFoundError):
            os.remove(path_list.tmp_query_audio(query_audio_full_name))
            os.remove(path_list.processed_query_audio(query_audio_name + ".mp3"))

        await queue.get_item(message.chat.id)
        queue.task_done()

@dp.message_handler(commands=['help'], state='*')
async def process_help_command_1(message: types.Message, messaging_type="start"):
    message_text = ("<b>–í–≤–µ–¥–µ–Ω–∏–µ</b>\n\n"
                    "<code>StravinskyBot</code> - –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω.\n\n"
                    "<b>–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç –±–æ—Ç–∞:</b>\n"
                    "1&gt; –ó–∞–≥—Ä—É–∂–∞–µ—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ –±–æ—Ç–∞\n"
                    "2&gt; –í–æ –≤—Ä–µ–º—è —Å–∞–º–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —è –≤–∞–º –≤—ã–¥–∞—é –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n\n"
                    "<i>–ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.</i>")
    keyboard_markup = types.InlineKeyboardMarkup()
    next_btn = types.InlineKeyboardButton('¬ª –î–∞–ª–µ–µ', callback_data="process_help_command_2")
    keyboard_markup.row(next_btn)
    if messaging_type == "start":
        await message.reply(message_text, reply_markup=keyboard_markup, parse_mode="HTML")
    elif messaging_type == "edit":
        await message.edit_text(message_text, reply_markup=keyboard_markup, parse_mode="HTML")

async def process_help_command_2(message: types.Message):
    message_text = ("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</b>\n\n"
                    "<i>–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É </i><i>/start</i>\n\n"
                    "<b># –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–µ–π\n"
                    "</b>0&gt; –û—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —ç—Ç–æ –º–µ–Ω—é –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞\n"
                    "1&gt; –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é '–ü–∞–ø–∫–∏' –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–∞–ø–∫—É\n"
                    "2&gt; –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –¥–ª—è –í–∞—Å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–µ\n"
                    "3&gt; –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üì§' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª–æ–º –º–Ω–µ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é –¥–∞–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ\n"
                    "5&gt; –ì–æ—Ç–æ–≤–æ!\n\n"
                    "<b># –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</b>\n"
                    "0&gt; –û—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —ç—Ç–æ –º–µ–Ω—é –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞\n"
                    "1&gt; –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é '–ü–∞–ø–∫–∏'\n"
                    "2&gt; –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üîç' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –∏ –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –Ω–µ –≤—ã–π–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã\n"
                    "3&gt; –ì–æ—Ç–æ–≤–æ!")
    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data="process_help_command_1")
    next_btn = types.InlineKeyboardButton('¬ª –î–∞–ª–µ–µ', callback_data="process_help_command_3")
    keyboard_markup.row(back_btn, next_btn)
    await message.edit_text(message_text, reply_markup=keyboard_markup, parse_mode="HTML")

async def process_help_command_3(message: types.Message):
    message_text = ("<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–µ–π:</b>\n"
                    "&gt;*.ogg\n"
                    "&gt;*.mp3\n"
                    "&gt;*.acc\n"
                    "&gt;*.wav\n"
                    "&gt;*.wma\n"
                    "&gt;*.flac\n"
                    "&gt;*.opus\n\n"
                    "<i>–ù–µ—Ç—É —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —É —Ç–µ–±—è –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å? –ù–µ –ø—Ä–æ–±–ª–µ–º–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± —ç—Ç–æ–º: </i><i>@SuenishSalkimbaev</i>")
    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data="process_help_command_2")
    next_btn = types.InlineKeyboardButton('¬ª –î–∞–ª–µ–µ', callback_data="process_help_command_4")
    keyboard_markup.row(back_btn, next_btn)
    await message.edit_text(message_text, reply_markup=keyboard_markup, parse_mode="HTML")

async def process_help_command_4(message: types.Message):
    message_text = ("<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
                    "<i>&gt; –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –±–æ—Ç—É, –∏–ª–∏ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –∂–µ —Ö–æ—Ç–µ–ª–∫–∏, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: </i><i>@SuenishSalkimbaev</i>")
    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data="process_help_command_3")
    next_btn = types.InlineKeyboardButton('–ì–æ—Ç–æ–≤–æ!', callback_data="welcome_message")
    keyboard_markup.row(back_btn, next_btn)
    await message.edit_text(message_text, reply_markup=keyboard_markup, parse_mode="HTML")

# TODO: danger
@dp.message_handler(commands=['backup'], state='*')
async def backup_message(msg: types.Message):
    await backup_sender(msg.bot, msg.chat.id)

@dp.message_handler(content_types=types.ContentType.ANY, state='*')
async def unknown_message(msg: types.Message):
    await msg.reply('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /help')

@dp.callback_query_handler(state='*')
async def callback_handler(query: types.CallbackQuery, state):
    answer_data = query.data
    if answer_data == 'welcome_message':
        await query.answer()
        await main_menu_message(query.message, 'edit')
    if answer_data == 'folders_list':
        await state.finish()
        await query.answer()
        await folder_list_menu_message(query.message, 'edit')
    if answer_data == 'process_help_command_1':
        await query.answer()
        await process_help_command_1(query.message, "edit")
    if answer_data == 'process_help_command_2':
        await query.answer()
        await process_help_command_2(query.message)
    if answer_data == 'process_help_command_3':
        await query.answer()
        await process_help_command_3(query.message)
    if answer_data == 'process_help_command_4':
        await query.answer()
        await process_help_command_4(query.message)

async def on_bot_shutdown(dp: Dispatcher):
    logging.warning("Bot shutdown command recived...")
    logging.warning("Waiting queue...")
    await queue.join()

if __name__ == '__main__':
    executor.start_polling(dp, on_shutdown=on_bot_shutdown)
